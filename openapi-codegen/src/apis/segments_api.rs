/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`explore_segments`]
#[derive(Clone, Debug)]
pub struct ExploreSegmentsParams {
    /// The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
    pub bounds: Vec<f32>,
    /// Desired activity type.
    pub activity_type: Option<String>,
    /// The minimum climbing category.
    pub min_cat: Option<i32>,
    /// The maximum climbing category.
    pub max_cat: Option<i32>
}

/// struct for passing parameters to the method [`get_logged_in_athlete_starred_segments`]
#[derive(Clone, Debug)]
pub struct GetLoggedInAthleteStarredSegmentsParams {
    /// Page number. Defaults to 1.
    pub page: Option<i32>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>
}

/// struct for passing parameters to the method [`get_segment_by_id`]
#[derive(Clone, Debug)]
pub struct GetSegmentByIdParams {
    /// The identifier of the segment.
    pub id: i64
}

/// struct for passing parameters to the method [`star_segment`]
#[derive(Clone, Debug)]
pub struct StarSegmentParams {
    /// The identifier of the segment to star.
    pub id: i64,
    /// If true, star the segment; if false, unstar the segment.
    pub starred: bool
}


/// struct for typed errors of method [`explore_segments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExploreSegmentsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_logged_in_athlete_starred_segments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLoggedInAthleteStarredSegmentsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentByIdError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`star_segment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StarSegmentError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}


/// Returns the top 10 segments matching a specified query.
pub async fn explore_segments(configuration: &configuration::Configuration, params: ExploreSegmentsParams) -> Result<models::ExplorerResponse, Error<ExploreSegmentsError>> {

    let uri_str = format!("{}/segments/explore", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&params.bounds.into_iter().map(|p| ("bounds".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("bounds", &params.bounds.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = params.activity_type {
        req_builder = req_builder.query(&[("activity_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.min_cat {
        req_builder = req_builder.query(&[("min_cat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_cat {
        req_builder = req_builder.query(&[("max_cat", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ExplorerResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ExplorerResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExploreSegmentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
pub async fn get_logged_in_athlete_starred_segments(configuration: &configuration::Configuration, params: GetLoggedInAthleteStarredSegmentsParams) -> Result<Vec<models::SummarySegment>, Error<GetLoggedInAthleteStarredSegmentsError>> {

    let uri_str = format!("{}/segments/starred", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SummarySegment&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SummarySegment&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLoggedInAthleteStarredSegmentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
pub async fn get_segment_by_id(configuration: &configuration::Configuration, params: GetSegmentByIdParams) -> Result<models::DetailedSegment, Error<GetSegmentByIdError>> {

    let uri_str = format!("{}/segments/{id}", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DetailedSegment`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DetailedSegment`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSegmentByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
pub async fn star_segment(configuration: &configuration::Configuration, params: StarSegmentParams) -> Result<models::DetailedSegment, Error<StarSegmentError>> {

    let uri_str = format!("{}/segments/{id}/starred", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("starred", params.starred.to_string());
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DetailedSegment`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DetailedSegment`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StarSegmentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

