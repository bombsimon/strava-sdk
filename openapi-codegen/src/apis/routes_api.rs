/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`get_route_as_gpx`]
#[derive(Clone, Debug)]
pub struct GetRouteAsGpxParams {
    /// The identifier of the route.
    pub id: i64
}

/// struct for passing parameters to the method [`get_route_as_tcx`]
#[derive(Clone, Debug)]
pub struct GetRouteAsTcxParams {
    /// The identifier of the route.
    pub id: i64
}

/// struct for passing parameters to the method [`get_route_by_id`]
#[derive(Clone, Debug)]
pub struct GetRouteByIdParams {
    /// The identifier of the route.
    pub id: i64
}

/// struct for passing parameters to the method [`get_routes_by_athlete_id`]
#[derive(Clone, Debug)]
pub struct GetRoutesByAthleteIdParams {
    /// The identifier of the athlete. Must match the authenticated athlete.
    pub id: i64,
    /// Page number. Defaults to 1.
    pub page: Option<i32>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>
}


/// struct for typed errors of method [`get_route_as_gpx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteAsGpxError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_route_as_tcx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteAsTcxError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_route_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteByIdError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_routes_by_athlete_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoutesByAthleteIdError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}


/// Returns a GPX file of the route. Requires read_all scope for private routes.
pub async fn get_route_as_gpx(configuration: &configuration::Configuration, params: GetRouteAsGpxParams) -> Result<(), Error<GetRouteAsGpxError>> {

    let uri_str = format!("{}/routes/{id}/export_gpx", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRouteAsGpxError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a TCX file of the route. Requires read_all scope for private routes.
pub async fn get_route_as_tcx(configuration: &configuration::Configuration, params: GetRouteAsTcxParams) -> Result<(), Error<GetRouteAsTcxError>> {

    let uri_str = format!("{}/routes/{id}/export_tcx", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRouteAsTcxError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a route using its identifier. Requires read_all scope for private routes.
pub async fn get_route_by_id(configuration: &configuration::Configuration, params: GetRouteByIdParams) -> Result<models::Route, Error<GetRouteByIdError>> {

    let uri_str = format!("{}/routes/{id}", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Route`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Route`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRouteByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
pub async fn get_routes_by_athlete_id(configuration: &configuration::Configuration, params: GetRoutesByAthleteIdParams) -> Result<Vec<models::Route>, Error<GetRoutesByAthleteIdError>> {

    let uri_str = format!("{}/athletes/{id}/routes", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Route&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Route&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRoutesByAthleteIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

