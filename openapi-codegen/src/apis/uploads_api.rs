/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_upload`]
#[derive(Clone, Debug)]
pub struct CreateUploadParams {
    /// The uploaded file.
    pub file: Option<std::path::PathBuf>,
    /// The desired name of the resulting activity.
    pub name: Option<String>,
    /// The desired description of the resulting activity.
    pub description: Option<String>,
    /// Whether the resulting activity should be marked as having been performed on a trainer.
    pub trainer: Option<String>,
    /// Whether the resulting activity should be tagged as a commute.
    pub commute: Option<String>,
    /// The format of the uploaded file.
    pub data_type: Option<String>,
    /// The desired external identifier of the resulting activity.
    pub external_id: Option<String>
}

/// struct for passing parameters to the method [`get_upload_by_id`]
#[derive(Clone, Debug)]
pub struct GetUploadByIdParams {
    /// The identifier of the upload.
    pub upload_id: i64
}


/// struct for typed errors of method [`create_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUploadError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_upload_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUploadByIdError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}


/// Uploads a new data file to create an activity from. Requires activity:write scope.
pub async fn create_upload(configuration: &configuration::Configuration, params: CreateUploadParams) -> Result<models::Upload, Error<CreateUploadError>> {

    let uri_str = format!("{}/uploads", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    if let Some(param_value) = params.name {
        multipart_form = multipart_form.text("name", param_value.to_string());
    }
    if let Some(param_value) = params.description {
        multipart_form = multipart_form.text("description", param_value.to_string());
    }
    if let Some(param_value) = params.trainer {
        multipart_form = multipart_form.text("trainer", param_value.to_string());
    }
    if let Some(param_value) = params.commute {
        multipart_form = multipart_form.text("commute", param_value.to_string());
    }
    if let Some(param_value) = params.data_type {
        multipart_form = multipart_form.text("data_type", param_value.to_string());
    }
    if let Some(param_value) = params.external_id {
        multipart_form = multipart_form.text("external_id", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Upload`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Upload`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateUploadError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns an upload for a given identifier. Requires activity:write scope.
pub async fn get_upload_by_id(configuration: &configuration::Configuration, params: GetUploadByIdParams) -> Result<models::Upload, Error<GetUploadByIdError>> {

    let uri_str = format!("{}/uploads/{uploadId}", configuration.base_path, uploadId=params.upload_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Upload`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Upload`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetUploadByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

