/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`get_activity_streams`]
#[derive(Clone, Debug)]
pub struct GetActivityStreamsParams {
    /// The identifier of the activity.
    pub id: i64,
    /// Desired stream types.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}

/// struct for passing parameters to the method [`get_route_streams`]
#[derive(Clone, Debug)]
pub struct GetRouteStreamsParams {
    /// The identifier of the route.
    pub id: i64
}

/// struct for passing parameters to the method [`get_segment_effort_streams`]
#[derive(Clone, Debug)]
pub struct GetSegmentEffortStreamsParams {
    /// The identifier of the segment effort.
    pub id: i64,
    /// The types of streams to return.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}

/// struct for passing parameters to the method [`get_segment_streams`]
#[derive(Clone, Debug)]
pub struct GetSegmentStreamsParams {
    /// The identifier of the segment.
    pub id: i64,
    /// The types of streams to return.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}


/// struct for typed errors of method [`get_activity_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActivityStreamsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_route_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteStreamsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_effort_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentEffortStreamsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentStreamsError {
    DefaultResponse(models::Fault),
    UnknownValue(serde_json::Value),
}


/// Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
pub async fn get_activity_streams(configuration: &configuration::Configuration, params: GetActivityStreamsParams) -> Result<models::StreamSet, Error<GetActivityStreamsError>> {

    let uri_str = format!("{}/activities/{id}/streams", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&params.keys.into_iter().map(|p| ("keys".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("keys", &params.keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    req_builder = req_builder.query(&[("key_by_type", &params.key_by_type.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamSet`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetActivityStreamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the given route's streams. Requires read_all scope for private routes.
pub async fn get_route_streams(configuration: &configuration::Configuration, params: GetRouteStreamsParams) -> Result<models::StreamSet, Error<GetRouteStreamsError>> {

    let uri_str = format!("{}/routes/{id}/streams", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamSet`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetRouteStreamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
pub async fn get_segment_effort_streams(configuration: &configuration::Configuration, params: GetSegmentEffortStreamsParams) -> Result<models::StreamSet, Error<GetSegmentEffortStreamsError>> {

    let uri_str = format!("{}/segment_efforts/{id}/streams", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&params.keys.into_iter().map(|p| ("keys".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("keys", &params.keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    req_builder = req_builder.query(&[("key_by_type", &params.key_by_type.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamSet`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSegmentEffortStreamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the given segment's streams. Requires read_all scope for private segments.
pub async fn get_segment_streams(configuration: &configuration::Configuration, params: GetSegmentStreamsParams) -> Result<models::StreamSet, Error<GetSegmentStreamsError>> {

    let uri_str = format!("{}/segments/{id}/streams", configuration.base_path, id=params.id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = match "csv" {
        "multi" => req_builder.query(&params.keys.into_iter().map(|p| ("keys".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("keys", &params.keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    req_builder = req_builder.query(&[("key_by_type", &params.key_by_type.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StreamSet`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StreamSet`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSegmentStreamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

